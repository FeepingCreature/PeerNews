module peerlist;

import models, nonce, crypto, server;
import std.(cgi, json, lib.sqlite3);

void invalidNonceError() using cgi {
  html \{
    head title "Problem!";
    body \{
      h3 "Invalid nonce!";
      p "The nonce you supplied is not valid or has expired.";
      p "I cannot follow your request. Sorry.";
    }
  }
}

void incorrectAddressError() using cgi {
  html \{
    head title "Problem!";
    body \{
      h3 "Incorrect address!";
      p "The address in your request packet does not match the address you are connecting from.";
      p "This worries me.";
    }
  }
}

void incorrectSignatureError() using cgi {
  html \{
    head title "Problem!";
    body \{
      h3 "Incorrect signature!";
      p "The signature provided did not match the public key.";
      p "Your identity could not be verified.";
      p "JSON looks good though.";
    }
  }
}

void withPeerlistDb(void delegate(Database) dg) {
  scope db = new Database "peerlist.db";
  onExit db.close;
  db.openStatementList();
  onExit db.finStatementList();
  dg(db);
}

void route() using cgi {
  if (path == "/get-my-addr") {
    header(200, "text/plain");
    send socket.getRemoteAddress().asString();
    return;
  }
  if (path == "/generate-nonce") {
    header(200, "text/plain");
    send generateNonce();
    return;
  }
  if (path == "/query-address") {
    string pk = getArg("pk");
    withPeerlistDb λ(Database db) {
      if string address <- db.exec("select address from peerlist where pk = ?", pk) {
        header(200, "text/plain");
        send address;
      } else {
        header(404, "text/plain");
        send "PK not found in peerlist!";
      }
    }
    return;
  }
  if (path == "/register") {
    header(200, "text/html");
    send "<!DOCTYPE html>";
    auto signed_message = json_unpack!SignedMessage getArg "json";
    auto register_request = json_unpack!RegisterMe signed_message.message;
    auto crypto = new SignatureCrypto register_request.pk;
    if (!crypto.verified(signed_message.(message, signature))) {
      incorrectSignatureError;
      return;
    }
    auto current_addr = socket.getRemoteAddress().asString();
    if (register_request.addr != current_addr) {
      incorrectAddressError;
      return;
    }
    if (!consumedValidNonce(register_request.nonce)) {
      invalidNonceError();
      return;
    }
    withPeerlistDb λ(Database db) {
      db.exec("insert or replace into peerlist (nick, address, pk) values(?, ?, ?)",
        register_request.nick, current_addr, register_request.pk);
    }
    html \{
      head title "Registered!";
      body \{
        h3 "Your signature has been validated and is correct.";
        p "You are \"$(register_request.nick)\" from $(socket.getRemoteAddress().asString()).";
        p "I will remember you for this pk.";
      }
    }
    return;
  }
  header([404, 200][path == "/"], "text/html");
  send "<!DOCTYPE html>";
  html \{
    head title "Hello World";
    body \{
      h3 "Hello World!";
      h4 "path is $path";
      h5 "query is $query_string";
      h5 "URL args = $args";
      p "This is the placeholder page! Hi!";
      p "You are $(socket.getRemoteAddress().asString()) I think?";
    }
  }
}

void main() {
  writeln "Starting server...";
  auto server = new Server("0.0.0.0", 8899, λ{ route; });
  writeln "Server running.";
  server.loop;
}
